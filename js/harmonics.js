// Generated by CoffeeScript 1.12.6
var Harm;

Harm = (function() {
  function Harm(opts) {
    if (!opts) {
      throw new Error('Missing Options');
    }
    if (!opts.osc) {
      throw new Error('Missing Oscillator');
    }
    if (!((opts.osc.freq != null) && (opts.osc.tf != null))) {
      throw new Error('osc must be an Osc');
    }
    this.osc = opts.osc;
    if (opts.n == null) {
      opts.n = 2;
    }
    if (typeof opts.n !== 'number') {
      throw new Error('n must be numeric');
    }
    if (!Number.isInteger(opts.n)) {
      throw new Error('n must be Integer');
    }
    if (!(opts.n > 0)) {
      throw new Error('n must be positive and not zero');
    }
    this.n = opts.n;
    if (opts.amps == null) {
      opts.amps = (function() {
        var a, i, j, ref;
        a = [];
        for (i = j = 1, ref = this.n; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
          a.push(1 / i);
        }
        return a;
      }).call(this);
    }
    if (Object.prototype.toString.call(opts.amps) !== "[object Array]") {
      throw new Error('amps must be an array');
    }
    if (opts.amps.length !== this.n) {
      throw new Error('size of amps must be opts.n');
    }
    if (!(function() {
      var a, b, j, len, ref;
      b = true;
      ref = opts.amps;
      for (j = 0, len = ref.length; j < len; j++) {
        a = ref[j];
        b &= typeof a === 'number';
      }
      return b;
    }).call(this)) {
      throw new Error('all values in amps must be numeric');
    }
    this.amps = opts.amps;
  }

  Harm.prototype.clone = function() {
    var a, h, n, o;
    o = this.osc.clone();
    n = this.n;
    a = (function() {
      var j, len, ref, val;
      a = [];
      ref = this.amps;
      for (j = 0, len = ref.length; j < len; j++) {
        val = ref[j];
        a.push(val);
      }
      return a;
    }).call(this);
    h = new Harm({
      osc: o,
      n: n,
      amps: a
    });
    return h;
  };

  Harm.prototype.tf = function(t) {
    var amps, i, j, n, o, osc, out, ref;
    osc = this.osc;
    n = this.n;
    amps = this.amps;
    out = 0;
    for (i = j = 1, ref = n; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
      o = osc.clone();
      o.freq *= i;
      o.amp *= amps[i - 1];
      out += o.tf(t);
    }
    return out;
  };

  return Harm;

})();

module.exports = Harm;
