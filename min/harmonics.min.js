var Harm;Harm=(function(){function n(n){if(!n){throw new Error('Missing Options')}if(!n.osc){throw new Error('Missing Oscillator')}if(!(n.osc.freq!=null&&n.osc.tf!=null)){throw new Error('osc must be an Osc')}this.osc=n.osc;n.n==null&&(n.n=2);if(typeof n.n!=='number'){throw new Error('n must be numeric')}if(!Number.isInteger(n.n)){throw new Error('n must be Integer')}if(!(n.n>0)){throw new Error('n must be positive and not zero')}this.n=n.n;n.amps==null&&(n.amps=(function(){var n,e,s,t;n=[];for(e=s=1, t=this.n;1<=t?s<=t:s>=t;e=1<=t?++s:--s)n.push(1/e);return n}).call(this));if(Object.prototype.toString.call(n.amps)!=="[object Array]"){throw new Error('amps must be an array')}if(n.amps.length!==this.n){throw new Error('size of amps must be opts.n')}if(!(function(){var e,s,t,o,r;s=!0;r=n.amps;for(t=0, o=r.length;t<o;t++)e=r[t],s&=typeof e==='number';return s}).call(this)){throw new Error('all values in amps must be numeric')}this.amps=n.amps}n.prototype.tf=function(n){var e,s,t,o,r,u,a,m;u=this.osc;o=this.n;e=this.amps;a=0;for(s=t=1, m=o;1<=m?t<=m:t>=m;s=1<=m?++t:--t)r=u.clone(),r.freq*=s,r.amp*=e[s-1],a+=r.tf(n);return a};return n})();module.exports=Harm