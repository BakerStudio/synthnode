var Harm;Harm=(function(){function n(n){if(!n){throw new Error('Missing Options')}if(!n.osc){throw new Error('Missing Oscillator')}if(!(n.osc.freq!=null&&n.osc.tf!=null)){throw new Error('osc must be an Osc')}this.osc=n.osc;n.n==null&&(n.n=2);if(typeof n.n!=='number'){throw new Error('n must be numeric')}if(!Number.isInteger(n.n)){throw new Error('n must be Integer')}if(!(n.n>0)){throw new Error('n must be positive and not zero')}this.n=n.n;n.amps==null&&(n.amps=(function(){var n,e,t,s;n=[];for(e=t=1, s=this.n;1<=s?t<=s:t>=s;e=1<=s?++t:--t)n.push(1/e);return n}).call(this));if(Object.prototype.toString.call(n.amps)!=="[object Array]"){throw new Error('amps must be an array')}if(n.amps.length!==this.n){throw new Error('size of amps must be opts.n')}if(!(function(){var e,t,s,o,r;t=!0;r=n.amps;for(s=0, o=r.length;s<o;s++)e=r[s],t&=typeof e==='number';return t}).call(this)){throw new Error('all values in amps must be numeric')}this.amps=n.amps}n.prototype.clone=function(){var e,t,s,o;o=this.osc.clone();s=this.n;e=(function(){var n,t,s,o;e=[];s=this.amps;for(n=0, t=s.length;n<t;n++)o=s[n],e.push(o);return e}).call(this);t=new n({osc:o,n:s,amps:e});return t};n.prototype.tf=function(n){var e,t,s,o,r,u,c,l;u=this.osc;o=this.n;e=this.amps;c=0;for(t=s=1, l=o;1<=l?s<=l:s>=l;t=1<=l?++s:--s)r=u.clone(),r.freq*=t,r.amp*=e[t-1],c+=r.tf(n);return c};return n})();module.exports=Harm